/**
 * SPV.js - v1.0.1
 * A BSV2 SPV extension for Bitcoin SV
 * https://github.com/matterpool/spv
 * Copyright Â© 2020 Matterpool Inc.
 */

var spv=function(t,s){"use strict";class e extends s.Struct{constructor(t,s,e,h,r,o){super({blockHash:t,txId:s,txIndex:e,hashes:h,depth:r,merkleRoot:o})}fromJSON(t){return this.fromObject({blockHash:Buffer.from(t.blockHash,"hex"),txIndex:s.Bn(t.txIndex),hashes:t.hashes.map(t=>Buffer.from(t,"hex"))}),this.txId=Buffer.from(t.hashes[0],"hex").reverse(),this.depth=t.hashes.length,this.merkleRoot=this.merklize(),this}toJSON(){return{blockHash:this.blockHash.toString("hex"),txId:this.txId.toString("hex"),txIndex:this.txIndex.toString(),depth:this.hashes.length,hashes:this.hashes.map(t=>t.toString("hex")),merkleRoot:this.merkleRoot.toString("hex")}}fromBr(t){this.blockHash=t.read(32),this.txIndex=t.readVarIntBn();let s=[];for(let e=t.readVarIntBn();e.gt(0);e=e.sub(1))s.push(t.read(32));return this.hashes=s,this.txId=Buffer.from(s[0]).reverse(),this.merkleRoot=this.merklize(),this}toBw(t){return t||(t=new s.Bw),t.write(this.blockHash),t.writeVarIntBn(this.txIndex),t.writeVarIntBn(s.Bn(this.hashes.length)),t.write(Buffer.concat(this.hashes)),t}merklize(){if(this.txIndex.eq(0)&&1===this.hashes.length)return this.hashes[0];let t=this.txIndex,e=this.hashes.slice(),h=e.shift();for(;e.length;){const r=t.mod(2).eq(0)?[h,e.shift()]:[e.shift(),h];h=s.Hash.sha256Sha256(Buffer.concat(r)),t=t.div(2)}return h}verify(t){return this.merkleRoot.equals(t.merkleRootBuf)}}class h extends s.Struct{constructor(t,s){super({tx:t,spv:s})}fromJSON(t){return this.tx=s.Tx.fromObject(t),this.spv=e.fromObject(t),this}toJSON(){return{tx:this.tx&&this.tx.toJSON(),spv:this.spv&&this.spv.toJSON()}}fromBr(t){return this.tx=s.Tx.fromBr(t),!t.eof()&&t.buf.slice(t.pos,t.pos+1).equals(Buffer.alloc(1))?this.spv=e.fromBr(t):this.spv=null,this}toBw(t){t||(t=new s.Bw);const e=this.tx.toBuffer();if(t.write(e),this.spv){const s=this.spv.toBuffer();t.write(s)}return t}verify(t){if(!this.spv||!this.spv)throw new Error("SPV proof not found");if(!this.tx.hash().equals(this.spv.hashes[0]))throw new Error("TXID mismatch");if(!this.spv.merkleRoot.equals(t.merkleRootBuf))throw new Error("Merkle root mismatch");if(!s.Hash.sha256Sha256(t.toBuffer()).reverse().equals(this.spv.blockHash))throw new Error("Block hash mismatch");return!0}}return t.SPV=e,t.SPVTx=h,t}({},bsvjs);
