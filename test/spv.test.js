import { assert } from 'chai'
import { SPVTx, SPV } from "../src/index.js"
import { BlockHeader } from "bsv"

describe('valid spvtx', () => {
    it('Validate an spvtx from a block header', () => {
        const header = BlockHeader.fromHex("00e0ff27e4de87cf564f157d6d07abe37df27274fd2a011bc07ec3000000000000000000e43a1de4dd9c526274b8ea9e4bf01fe8928649f8e5b94abc4e05d83b8abeb924a51c645f32a00418b3bd152b");
        const spvTx = SPVTx.fromHex("01000000017125b04467dc2e3e766a0dae2b7a2f74211c7aa7bf796d47fbf44c259be23462661100006b483045022100f1e5fdfd36837a2e84225e157d25f4d341cad49bfdc909e0332e5e5a58e849a102203b5c59d2f5cf4c6f84b2bc189a03ed802d48784f335b712f73e80f807d4cdd714121037d53430715b2bc8463847e79d7e259c11a7d81bf7d6166e003e1b103b65731ffffffffff0123020000000000001976a9140ec56960e83cd3c03c8882e0fd34d462a34c653888ac00000000000000000000000001a4147e4346fda372c622c1819ac5c31661971c0f6be7672f0fcd1c00c1726e76669911c9ffbd2975f9966fa8bb23e32bfd33bc439eb4e41167780f39009c90be8cc62b1729569b5c8d50b59bad4489e95ac7a839555c1ee7955503c702bc9ac972d2dbb46d2534559d2a268a7b06872b279015809a323f3d53c7dfdb01537035a4ef485275a727aeb29328e49c1afc4fedac87d9333f059963f54a333d21b4faa9f912ab2af2e72f6941c3d1c979331e34f62fa7dac23daf29f24c049d3395fea0e77ad4dfdf496844cf289390364ce2defdab1e2b9bc4a935d030d9cf05fb2c79325c80ab426d6ed274d5440464d7074bdbbf47551d91dc9993a8935eb4f4ec9378102a8a32d1768221ee7ba35cefcd91d1e90d39ae8de541cddb8cab43a01a960e09d820fc6c1a35cbe372d0121d22fd1938cda5f89861be9a587173dbd8c5e232ce766ea43e1dc46754b18ecc7eceb34f3e87d41db9a48befefd46134b1144963ede9b117ef7556857fb9cd4ad6f0a6a050a45bc7e3698c169149cacf761b5533d74e9c7f2c6e01ec0fba86466c86e62c3fd9fbd1462fdd558d9e2aedfc65fc8d583ddca868fa29acebaa190e42f35b8912fe353d331e64fd0ae5310b7ef3e52b1c4d2cd7e99dd0553259394f44b8b71a0ad36918c6b2d9941e1c1872daf9351606edd68bf125246b99d2cf44ecd1c526fdc06fbfa3d9c9")
        assert.isTrue(spvTx.validate(header))
    })
})

describe('valid spv proof', () => {
    it('Validate an spvtx from a block header', () => {
        const header = BlockHeader.fromHex("00e0ff27e4de87cf564f157d6d07abe37df27274fd2a011bc07ec3000000000000000000e43a1de4dd9c526274b8ea9e4bf01fe8928649f8e5b94abc4e05d83b8abeb924a51c645f32a00418b3bd152b");
        const spv = SPV.fromHex("000000000000000001a4147e4346fda372c622c1819ac5c31661971c0f6be7672f0fcd1c00c1726e76669911c9ffbd2975f9966fa8bb23e32bfd33bc439eb4e41167780f39009c90be8cc62b1729569b5c8d50b59bad4489e95ac7a839555c1ee7955503c702bc9ac972d2dbb46d2534559d2a268a7b06872b279015809a323f3d53c7dfdb01537035a4ef485275a727aeb29328e49c1afc4fedac87d9333f059963f54a333d21b4faa9f912ab2af2e72f6941c3d1c979331e34f62fa7dac23daf29f24c049d3395fea0e77ad4dfdf496844cf289390364ce2defdab1e2b9bc4a935d030d9cf05fb2c79325c80ab426d6ed274d5440464d7074bdbbf47551d91dc9993a8935eb4f4ec9378102a8a32d1768221ee7ba35cefcd91d1e90d39ae8de541cddb8cab43a01a960e09d820fc6c1a35cbe372d0121d22fd1938cda5f89861be9a587173dbd8c5e232ce766ea43e1dc46754b18ecc7eceb34f3e87d41db9a48befefd46134b1144963ede9b117ef7556857fb9cd4ad6f0a6a050a45bc7e3698c169149cacf761b5533d74e9c7f2c6e01ec0fba86466c86e62c3fd9fbd1462fdd558d9e2aedfc65fc8d583ddca868fa29acebaa190e42f35b8912fe353d331e64fd0ae5310b7ef3e52b1c4d2cd7e99dd0553259394f44b8b71a0ad36918c6b2d9941e1c1872daf9351606edd68bf125246b99d2cf44ecd1c526fdc06fbfa3d9c9")
        assert.isTrue(spv.validate(header))
    })
})

describe('null spv proof', () => {
    it('Ensure spvtx validation throws error from a null SPV proof', () => {
        const header = BlockHeader.fromHex("00133727e4de87cf564f157d6d07abe37df27274fd2a011bc07ec3000000000000000000e43a1de4dd9c526274b8ea9e4bf01fe8928649f8e5b94abc4e05d83b8abeb924a51c645f32a00418b3bd152b");
        const spvTx = SPVTx.fromHex("01000000017125b04467dc2e3e766a0dae2b7a2f74211c7aa7bf796d47fbf44c259be23462661100006b483045022100f1e5fdfd36837a2e84225e157d25f4d341cad49bfdc909e0332e5e5a58e849a102203b5c59d2f5cf4c6f84b2bc189a03ed802d48784f335b712f73e80f807d4cdd714121037d53430715b2bc8463847e79d7e259c11a7d81bf7d6166e003e1b103b65731ffffffffff0123020000000000001976a9140ec56960e83cd3c03c8882e0fd34d462a34c653888ac00000000")
        assert.throws(() => { spvTx.validate(header) }, Error, "SPV proof not found")
    })
})

describe('block hash mismatch', () => {
    it('Ensure spvtx validation throws error from an incorrect block header', () => {
        const header = BlockHeader.fromHex("00133727e4de87cf564f157d6d07abe37df27274fd2a011bc07ec3000000000000000000e43a1de4dd9c526274b8ea9e4bf01fe8928649f8e5b94abc4e05d83b8abeb924a51c645f32a00418b3bd152b");
        const spvTx = SPVTx.fromHex("01000000017125b04467dc2e3e766a0dae2b7a2f74211c7aa7bf796d47fbf44c259be23462661100006b483045022100f1e5fdfd36837a2e84225e157d25f4d341cad49bfdc909e0332e5e5a58e849a102203b5c59d2f5cf4c6f84b2bc189a03ed802d48784f335b712f73e80f807d4cdd714121037d53430715b2bc8463847e79d7e259c11a7d81bf7d6166e003e1b103b65731ffffffffff0123020000000000001976a9140ec56960e83cd3c03c8882e0fd34d462a34c653888ac00000000000000000000000001a4147e4346fda372c622c1819ac5c31661971c0f6be7672f0fcd1c00c1726e76669911c9ffbd2975f9966fa8bb23e32bfd33bc439eb4e41167780f39009c90be8cc62b1729569b5c8d50b59bad4489e95ac7a839555c1ee7955503c702bc9ac972d2dbb46d2534559d2a268a7b06872b279015809a323f3d53c7dfdb01537035a4ef485275a727aeb29328e49c1afc4fedac87d9333f059963f54a333d21b4faa9f912ab2af2e72f6941c3d1c979331e34f62fa7dac23daf29f24c049d3395fea0e77ad4dfdf496844cf289390364ce2defdab1e2b9bc4a935d030d9cf05fb2c79325c80ab426d6ed274d5440464d7074bdbbf47551d91dc9993a8935eb4f4ec9378102a8a32d1768221ee7ba35cefcd91d1e90d39ae8de541cddb8cab43a01a960e09d820fc6c1a35cbe372d0121d22fd1938cda5f89861be9a587173dbd8c5e232ce766ea43e1dc46754b18ecc7eceb34f3e87d41db9a48befefd46134b1144963ede9b117ef7556857fb9cd4ad6f0a6a050a45bc7e3698c169149cacf761b5533d74e9c7f2c6e01ec0fba86466c86e62c3fd9fbd1462fdd558d9e2aedfc65fc8d583ddca868fa29acebaa190e42f35b8912fe353d331e64fd0ae5310b7ef3e52b1c4d2cd7e99dd0553259394f44b8b71a0ad36918c6b2d9941e1c1872daf9351606edd68bf125246b99d2cf44ecd1c526fdc06fbfa3d9c9")
        assert.throws(() => { spvTx.validate(header) }, Error, "Block hash mismatch")
    })
})

describe('merkle root mismatch', () => {
    it('Ensure spvtx validation throws error from an incorrect merkle proof', () => {
        const header = BlockHeader.fromHex("00e0ff27e4de87cf564f157d6d07abe37df27274fd2a011bc07ec3000000000000000000e43a1de4dd9c526274b8ea9e4bf01fe8928649f8e5b94abc4e05d83b8abeb924a51c645f32a00418b3bd152b");
        const spvTx = SPVTx.fromHex("01000000017125b04467dc2e3e766a0dae2b7a2f74211c7aa7bf796d47fbf44c259be23462661100006b483045022100f1e5fdfd36837a2e84225e157d25f4d341cad49bfdc909e0332e5e5a58e849a102203b5c59d2f5cf4c6f84b2bc189a03ed802d48784f335b712f73e80f807d4cdd714121037d53430715b2bc8463847e79d7e259c11a7d81bf7d6166e003e1b103b65731ffffffffff0123020000000000001976a9140ec56960e83cd3c03c8882e0fd34d462a34c653888ac00000000000000000000000001a4147e4346fda372c622c1819ac5c31661971c0f6be7672f0fcd1c00c1726e76669911c9ffbd2975f9966fa8bb23e32bfd33bc439eb4e41167780f39009c90be8cc62b1729569b5c8d50b59bad4489e13ac7a839555c1ee7955503c702bc9ac972d2dbb46d2534559d2a268a7b06872b279015809a323f3d53c7dfdb01537035a4ef485275a727aeb29328e49c1afc4fedac87d9333f059963f54a333d21b4faa9f912ab2af2e72f6941c3d1c979331e34f62fa7dac23daf29f24c049d3395fea0e77ad4dfdf496844cf289390364ce2defdab1e2b9bc4a935d030d9cf05fb2c79325c80ab426d6ed274d5440464d7074bdbbf47551d91dc9993a8935eb4f4ec9378102a8a32d1768221ee7ba35cefcd91d1e90d39ae8de541cddb8cab43a01a960e09d820fc6c1a35cbe372d0121d22fd1938cda5f89861be9a587173dbd8c5e232ce766ea43e1dc46754b18ecc7eceb34f3e87d41db9a48befefd46134b1144963ede9b117ef7556857fb9cd4ad6f0a6a050a45bc7e3698c169149cacf761b5533d74e9c7f2c6e01ec0fba86466c86e62c3fd9fbd1462fdd558d9e2aedfc65fc8d583ddca868fa29acebaa190e42f35b8912fe353d331e64fd0ae5310b7ef3e52b1c4d2cd7e99dd0553259394f44b8b71a0ad36918c6b2d9941e1c1872daf9351606edd68bf125246b99d2cf44ecd1c526fdc06fbfa3d9c9")
        assert.throws(() => { spvTx.validate(header) }, Error, "Merkle root mismatch")
    })
})

describe('isomorphic', () => {
    it('Ensure spvtx hex output matches input', () => {
        const spvTxHex = "01000000017125b04467dc2e3e766a0dae2b7a2f74211c7aa7bf796d47fbf44c259be23462661100006b483045022100f1e5fdfd36837a2e84225e157d25f4d341cad49bfdc909e0332e5e5a58e849a102203b5c59d2f5cf4c6f84b2bc189a03ed802d48784f335b712f73e80f807d4cdd714121037d53430715b2bc8463847e79d7e259c11a7d81bf7d6166e003e1b103b65731ffffffffff0123020000000000001976a9140ec56960e83cd3c03c8882e0fd34d462a34c653888ac00000000000000000000000001a4147e4346fda372c622c1819ac5c31661971c0f6be7672f0fcd1c00c1726e76669911c9ffbd2975f9966fa8bb23e32bfd33bc439eb4e41167780f39009c90be8cc62b1729569b5c8d50b59bad4489e95ac7a839555c1ee7955503c702bc9ac972d2dbb46d2534559d2a268a7b06872b279015809a323f3d53c7dfdb01537035a4ef485275a727aeb29328e49c1afc4fedac87d9333f059963f54a333d21b4faa9f912ab2af2e72f6941c3d1c979331e34f62fa7dac23daf29f24c049d3395fea0e77ad4dfdf496844cf289390364ce2defdab1e2b9bc4a935d030d9cf05fb2c79325c80ab426d6ed274d5440464d7074bdbbf47551d91dc9993a8935eb4f4ec9378102a8a32d1768221ee7ba35cefcd91d1e90d39ae8de541cddb8cab43a01a960e09d820fc6c1a35cbe372d0121d22fd1938cda5f89861be9a587173dbd8c5e232ce766ea43e1dc46754b18ecc7eceb34f3e87d41db9a48befefd46134b1144963ede9b117ef7556857fb9cd4ad6f0a6a050a45bc7e3698c169149cacf761b5533d74e9c7f2c6e01ec0fba86466c86e62c3fd9fbd1462fdd558d9e2aedfc65fc8d583ddca868fa29acebaa190e42f35b8912fe353d331e64fd0ae5310b7ef3e52b1c4d2cd7e99dd0553259394f44b8b71a0ad36918c6b2d9941e1c1872daf9351606edd68bf125246b99d2cf44ecd1c526fdc06fbfa3d9c9";
        const spvTx = SPVTx.fromHex(spvTxHex)
        assert.equal(spvTx.toHex(), spvTxHex)
    })
})