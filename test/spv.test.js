import { assert } from 'chai'
import { SPVTx, SPV } from "../src/index.js"
import { BlockHeader, Br } from "bsv"

describe('valid spvtx', () => {
    it('Validates an spvtx from a block header', () => {
        const header = BlockHeader.fromHex("00e0ff27e4de87cf564f157d6d07abe37df27274fd2a011bc07ec3000000000000000000e43a1de4dd9c526274b8ea9e4bf01fe8928649f8e5b94abc4e05d83b8abeb924a51c645f32a00418b3bd152b")
        const spvTx = SPVTx.fromHex("01000000017125b04467dc2e3e766a0dae2b7a2f74211c7aa7bf796d47fbf44c259be23462661100006b483045022100f1e5fdfd36837a2e84225e157d25f4d341cad49bfdc909e0332e5e5a58e849a102203b5c59d2f5cf4c6f84b2bc189a03ed802d48784f335b712f73e80f807d4cdd714121037d53430715b2bc8463847e79d7e259c11a7d81bf7d6166e003e1b103b65731ffffffffff0123020000000000001976a9140ec56960e83cd3c03c8882e0fd34d462a34c653888ac00000000000000000000000001a4147e4346fda372c622c1819ac5c31661971c0f6be7672f0fcd1c00c1726e76669911c9ffbd2975f9966fa8bb23e32bfd33bc439eb4e41167780f39009c90be8cc62b1729569b5c8d50b59bad4489e95ac7a839555c1ee7955503c702bc9ac972d2dbb46d2534559d2a268a7b06872b279015809a323f3d53c7dfdb01537035a4ef485275a727aeb29328e49c1afc4fedac87d9333f059963f54a333d21b4faa9f912ab2af2e72f6941c3d1c979331e34f62fa7dac23daf29f24c049d3395fea0e77ad4dfdf496844cf289390364ce2defdab1e2b9bc4a935d030d9cf05fb2c79325c80ab426d6ed274d5440464d7074bdbbf47551d91dc9993a8935eb4f4ec9378102a8a32d1768221ee7ba35cefcd91d1e90d39ae8de541cddb8cab43a01a960e09d820fc6c1a35cbe372d0121d22fd1938cda5f89861be9a587173dbd8c5e232ce766ea43e1dc46754b18ecc7eceb34f3e87d41db9a48befefd46134b1144963ede9b117ef7556857fb9cd4ad6f0a6a050a45bc7e3698c169149cacf761b5533d74e9c7f2c6e01ec0fba86466c86e62c3fd9fbd1462fdd558d9e2aedfc65fc8d583ddca868fa29acebaa190e42f35b8912fe353d331e64fd0ae5310b7ef3e52b1c4d2cd7e99dd0553259394f44b8b71a0ad36918c6b2d9941e1c1872daf9351606edd68bf125246b99d2cf44ecd1c526fdc06fbfa3d9c9")
        assert.isTrue(spvTx.verify(header))
    })
})

describe('valid spv proof', () => {
    it('Validates an spvtx from a block header', () => {
        const header = BlockHeader.fromHex("00e0ff27e4de87cf564f157d6d07abe37df27274fd2a011bc07ec3000000000000000000e43a1de4dd9c526274b8ea9e4bf01fe8928649f8e5b94abc4e05d83b8abeb924a51c645f32a00418b3bd152b")
        const spv = SPV.fromHex("000000000000000001a4147e4346fda372c622c1819ac5c31661971c0f6be7672f0fcd1c00c1726e76669911c9ffbd2975f9966fa8bb23e32bfd33bc439eb4e41167780f39009c90be8cc62b1729569b5c8d50b59bad4489e95ac7a839555c1ee7955503c702bc9ac972d2dbb46d2534559d2a268a7b06872b279015809a323f3d53c7dfdb01537035a4ef485275a727aeb29328e49c1afc4fedac87d9333f059963f54a333d21b4faa9f912ab2af2e72f6941c3d1c979331e34f62fa7dac23daf29f24c049d3395fea0e77ad4dfdf496844cf289390364ce2defdab1e2b9bc4a935d030d9cf05fb2c79325c80ab426d6ed274d5440464d7074bdbbf47551d91dc9993a8935eb4f4ec9378102a8a32d1768221ee7ba35cefcd91d1e90d39ae8de541cddb8cab43a01a960e09d820fc6c1a35cbe372d0121d22fd1938cda5f89861be9a587173dbd8c5e232ce766ea43e1dc46754b18ecc7eceb34f3e87d41db9a48befefd46134b1144963ede9b117ef7556857fb9cd4ad6f0a6a050a45bc7e3698c169149cacf761b5533d74e9c7f2c6e01ec0fba86466c86e62c3fd9fbd1462fdd558d9e2aedfc65fc8d583ddca868fa29acebaa190e42f35b8912fe353d331e64fd0ae5310b7ef3e52b1c4d2cd7e99dd0553259394f44b8b71a0ad36918c6b2d9941e1c1872daf9351606edd68bf125246b99d2cf44ecd1c526fdc06fbfa3d9c9")
        assert.isTrue(spv.verify(header))
    })
})

describe('get spvtx/rawtxs from byte stream', () => {
    it('Ensures spvtx/rawtx can be decoded from a Br of many serialised txs', () => {
        let br = new Br(Buffer.from("01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff41036df8092f7461616c2e636f6d2f506c656173652070617920302e3520736174732f627974652c20696e666f407461616c2e636f6dd581aff168d2b22be73a0200ffffffff02a6805225000000001976a9148e9170be3f733a9773c907517fb9b786f1c884c688ac0000000000000000fda402006a04ac1eed884d53027b2276657273696f6e223a22302e31222c22686569676874223a3635333432312c22707265764d696e65724964223a22303365393264336535633366376264393435646662663438653761393933393362316266623366313166333830616533306432383665376666326165633561323730222c22707265764d696e65724964536967223a2233303435303232313030643736333630653464323133333163613836663031386330343665353763393338663139373735303734373333333533363062653337303438636165316166333032323030626536363034353430323162663934363465393966356139353831613938633963663439353430373539386335396234373334623266646234383262663937222c226d696e65724964223a22303365393264336535633366376264393435646662663438653761393933393362316266623366313166333830616533306432383665376666326165633561323730222c2276637478223a7b2274784964223a2235373962343335393235613930656533396133376265336230306239303631653734633330633832343133663664306132303938653162656137613235313566222c22766f7574223a307d2c226d696e6572436f6e74616374223a7b22656d61696c223a22696e666f407461616c2e636f6d222c226e616d65223a225441414c20446973747269627574656420496e666f726d6174696f6e20546563686e6f6c6f67696573222c226d65726368616e74415049456e64506f696e74223a2268747470733a2f2f6d65726368616e746170692e7461616c2e636f6d2f227d7d46304402203c466d41d83a7c0175a1b878717afc13705c8317264f7c1df242eea5036ef98402204249a7046106683673305f103ba42ab2d5ab51bb73c5929f90270e996696e216000000000000000000000000000cb98a0c5f29866ad0f56c0d81372075cf7f26b60e5e69000c4aa0450ba6156ec21e39b315598f03a6bb331193065b4c3a5ed3d0c496c3d0072c8fb5d17d7571f2b44483b3ef0c941731421c18fed621b96872de188543e0de1644f52bdca8b6f9f4d767aaa719178a05419df749cbb8310a87dac8bbb2a6ecc762701135135af8c8e9f2878c67bd4a02840b7a9e90e2b912bdee1000c37da6ea43a5e0bdd5de449cc4d7465d1d9926d1727526495b1cdc35e2b36549f99e8d42f30679a83410d30ec024308252197ce614e497d9c01f1c3b32a81cfa27f373d4c096215cb06c59aec9b6530b81fcd215950079b592161f8ee3f7b32a8c0b04b7f01326e19f78170190377110274551c22f8fb9c0b60a46c8fa5709511e3ddaed7f9aa66c3f512eee6fbb0446042bbc30fb71c8ef21c500b134e19f1aaffef2218b134507ed9a941d228bede01ca6c7a2dcf305dd5d22c698e5069e00d5d13bda4d7c72cce85c8ea2f7f4151c3653204894ae0cf939dc0cf11efe37960d59aa731d8798eb727440a0615777540fccf5422d1baf0566570dbf2af6360f1213020100000001104678f8c40a9a2132823b3b5fa52c51ba6830ba15edb4a1db3f04ec1529e1ef010000006b483045022100bb199dcc03f7bf0c67f8335ace3bdcc608f8cdc9fbf031603c3e8066899ad25202203fd67bfa96432a07a7fc56ba9a40337fbb2c30626b0340d0834c255f690e53ff412103840ed0dc71c58696236aa8fd32dd447fc46f9b3b59c7918599d98ffc0eb632d0ffffffff02000000000000000036006a0c7361746f706c61792e636f6d26302e322c3130345f6171756162616c6c2c312c78782c516c4a4d5745553d2c3130322c302c2c1a770100000000001976a91479192292387de8e1d1b717bd962fbeb9146e640e88ac0000000001000000014826c8ecc6aaff37f30089c27a6d69740435f036c37fd21b7b32abf5e5a96e6e010000006b48304502210083fccd1f34d0392787fa6dcdeecc4508f04070516b666ad5b2f02beba6f11a1f0220457b049aab523ca64544e1bec1bb3a1acf39a95074726fedf7281e5ad5e8ce78412103840ed0dc71c58696236aa8fd32dd447fc46f9b3b59c7918599d98ffc0eb632d0ffffffff02000000000000000038006a0c7361746f706c61792e636f6d28302e322c3130315f70622c312c36373835656130632c516c56425830413d2c31323833332c312c2c14770100000000001976a91479192292387de8e1d1b717bd962fbeb9146e640e88ac000000000000000000000000000cb98a0c5f29866ad0f56c0d81372075cf7f26b60e5e69050c146167fb9ab1ea8882ac52f93a353fc19b270d00241f826dd3c131249e2de3eac9e237210c957486010daac8679ac41895e2ae9e860e8ea7173a30f4eb7808a42d9f5030022a437cfd5c3cdf650519eda64c30ec699ade4dcf965cbfdcbb8fb26946f2db72030b2838f156ec8fd9c88bf371e46509a9671b6471ee3d63cf9b5eea43a5e0bdd5de449cc4d7465d1d9926d1727526495b1cdc35e2b36549f99e8d42f30679a83410d30ec024308252197ce614e497d9c01f1c3b32a81cfa27f373d4c096215cb06c59aec9b6530b81fcd215950079b592161f8ee3f7b32a8c0b04b7f01326e19f78170190377110274551c22f8fb9c0b60a46c8fa5709511e3ddaed7f9aa66c3f512eee6fbb0446042bbc30fb71c8ef21c500b134e19f1aaffef2218b134507ed9a941d228bede01ca6c7a2dcf305dd5d22c698e5069e00d5d13bda4d7c72cce85c8ea2f7f4151c3653204894ae0cf939dc0cf11efe37960d59aa731d8798eb727440a0615777540fccf5422d1baf0566570dbf2af6360f121302", "hex"))
        const spvtxs = []
        while(!br.eof()){
            try {
                const spvtx = SPVTx.fromBr(br)
                spvtxs.push(spvtx)
                br = new Br(br.buf.slice(spvtx.toBuffer().length))
            } catch(e) {
                break
            }
        }
        assert.isNotNull(spvtxs[0].spv)
        assert.isNull(spvtxs[1].spv)
        assert.isNotNull(spvtxs[2].spv)
    })
})

describe('null spv proof', () => {
    it('Ensures spvtx validation throws error from a null SPV proof', () => {
        const header = BlockHeader.fromHex("00133727e4de87cf564f157d6d07abe37df27274fd2a011bc07ec3000000000000000000e43a1de4dd9c526274b8ea9e4bf01fe8928649f8e5b94abc4e05d83b8abeb924a51c645f32a00418b3bd152b")
        const spvTx = SPVTx.fromHex("01000000017125b04467dc2e3e766a0dae2b7a2f74211c7aa7bf796d47fbf44c259be23462661100006b483045022100f1e5fdfd36837a2e84225e157d25f4d341cad49bfdc909e0332e5e5a58e849a102203b5c59d2f5cf4c6f84b2bc189a03ed802d48784f335b712f73e80f807d4cdd714121037d53430715b2bc8463847e79d7e259c11a7d81bf7d6166e003e1b103b65731ffffffffff0123020000000000001976a9140ec56960e83cd3c03c8882e0fd34d462a34c653888ac00000000")
        assert.throws(() => { spvTx.verify(header) }, Error, "SPV proof not found")
    })
})

describe('block hash mismatch', () => {
    it('Ensures spvtx validation throws error from an incorrect block header', () => {
        const header = BlockHeader.fromHex("00133727e4de87cf564f157d6d07abe37df27274fd2a011bc07ec3000000000000000000e43a1de4dd9c526274b8ea9e4bf01fe8928649f8e5b94abc4e05d83b8abeb924a51c645f32a00418b3bd152b")
        const spvTx = SPVTx.fromHex("01000000017125b04467dc2e3e766a0dae2b7a2f74211c7aa7bf796d47fbf44c259be23462661100006b483045022100f1e5fdfd36837a2e84225e157d25f4d341cad49bfdc909e0332e5e5a58e849a102203b5c59d2f5cf4c6f84b2bc189a03ed802d48784f335b712f73e80f807d4cdd714121037d53430715b2bc8463847e79d7e259c11a7d81bf7d6166e003e1b103b65731ffffffffff0123020000000000001976a9140ec56960e83cd3c03c8882e0fd34d462a34c653888ac00000000000000000000000001a4147e4346fda372c622c1819ac5c31661971c0f6be7672f0fcd1c00c1726e76669911c9ffbd2975f9966fa8bb23e32bfd33bc439eb4e41167780f39009c90be8cc62b1729569b5c8d50b59bad4489e95ac7a839555c1ee7955503c702bc9ac972d2dbb46d2534559d2a268a7b06872b279015809a323f3d53c7dfdb01537035a4ef485275a727aeb29328e49c1afc4fedac87d9333f059963f54a333d21b4faa9f912ab2af2e72f6941c3d1c979331e34f62fa7dac23daf29f24c049d3395fea0e77ad4dfdf496844cf289390364ce2defdab1e2b9bc4a935d030d9cf05fb2c79325c80ab426d6ed274d5440464d7074bdbbf47551d91dc9993a8935eb4f4ec9378102a8a32d1768221ee7ba35cefcd91d1e90d39ae8de541cddb8cab43a01a960e09d820fc6c1a35cbe372d0121d22fd1938cda5f89861be9a587173dbd8c5e232ce766ea43e1dc46754b18ecc7eceb34f3e87d41db9a48befefd46134b1144963ede9b117ef7556857fb9cd4ad6f0a6a050a45bc7e3698c169149cacf761b5533d74e9c7f2c6e01ec0fba86466c86e62c3fd9fbd1462fdd558d9e2aedfc65fc8d583ddca868fa29acebaa190e42f35b8912fe353d331e64fd0ae5310b7ef3e52b1c4d2cd7e99dd0553259394f44b8b71a0ad36918c6b2d9941e1c1872daf9351606edd68bf125246b99d2cf44ecd1c526fdc06fbfa3d9c9")
        assert.throws(() => { spvTx.verify(header) }, Error, "Block hash mismatch")
    })
})

describe('merkle root mismatch', () => {
    it('Ensures spvtx validation throws error from an incorrect merkle proof', () => {
        const header = BlockHeader.fromHex("00e0ff27e4de87cf564f157d6d07abe37df27274fd2a011bc07ec3000000000000000000e43a1de4dd9c526274b8ea9e4bf01fe8928649f8e5b94abc4e05d83b8abeb924a51c645f32a00418b3bd152b")
        const spvTx = SPVTx.fromHex("01000000017125b04467dc2e3e766a0dae2b7a2f74211c7aa7bf796d47fbf44c259be23462661100006b483045022100f1e5fdfd36837a2e84225e157d25f4d341cad49bfdc909e0332e5e5a58e849a102203b5c59d2f5cf4c6f84b2bc189a03ed802d48784f335b712f73e80f807d4cdd714121037d53430715b2bc8463847e79d7e259c11a7d81bf7d6166e003e1b103b65731ffffffffff0123020000000000001976a9140ec56960e83cd3c03c8882e0fd34d462a34c653888ac00000000000000000000000001a4147e4346fda372c622c1819ac5c31661971c0f6be7672f0fcd1c00c1726e76669911c9ffbd2975f9966fa8bb23e32bfd33bc439eb4e41167780f39009c90be8cc62b1729569b5c8d50b59bad4489e13ac7a839555c1ee7955503c702bc9ac972d2dbb46d2534559d2a268a7b06872b279015809a323f3d53c7dfdb01537035a4ef485275a727aeb29328e49c1afc4fedac87d9333f059963f54a333d21b4faa9f912ab2af2e72f6941c3d1c979331e34f62fa7dac23daf29f24c049d3395fea0e77ad4dfdf496844cf289390364ce2defdab1e2b9bc4a935d030d9cf05fb2c79325c80ab426d6ed274d5440464d7074bdbbf47551d91dc9993a8935eb4f4ec9378102a8a32d1768221ee7ba35cefcd91d1e90d39ae8de541cddb8cab43a01a960e09d820fc6c1a35cbe372d0121d22fd1938cda5f89861be9a587173dbd8c5e232ce766ea43e1dc46754b18ecc7eceb34f3e87d41db9a48befefd46134b1144963ede9b117ef7556857fb9cd4ad6f0a6a050a45bc7e3698c169149cacf761b5533d74e9c7f2c6e01ec0fba86466c86e62c3fd9fbd1462fdd558d9e2aedfc65fc8d583ddca868fa29acebaa190e42f35b8912fe353d331e64fd0ae5310b7ef3e52b1c4d2cd7e99dd0553259394f44b8b71a0ad36918c6b2d9941e1c1872daf9351606edd68bf125246b99d2cf44ecd1c526fdc06fbfa3d9c9")
        assert.throws(() => { spvTx.verify(header) }, Error, "Merkle root mismatch")
    })
})

describe('isomorphic', () => {
    it('Ensures spvtx hex output matches input', () => {
        const spvTxHex = "01000000017125b04467dc2e3e766a0dae2b7a2f74211c7aa7bf796d47fbf44c259be23462661100006b483045022100f1e5fdfd36837a2e84225e157d25f4d341cad49bfdc909e0332e5e5a58e849a102203b5c59d2f5cf4c6f84b2bc189a03ed802d48784f335b712f73e80f807d4cdd714121037d53430715b2bc8463847e79d7e259c11a7d81bf7d6166e003e1b103b65731ffffffffff0123020000000000001976a9140ec56960e83cd3c03c8882e0fd34d462a34c653888ac00000000000000000000000001a4147e4346fda372c622c1819ac5c31661971c0f6be7672f0fcd1c00c1726e76669911c9ffbd2975f9966fa8bb23e32bfd33bc439eb4e41167780f39009c90be8cc62b1729569b5c8d50b59bad4489e95ac7a839555c1ee7955503c702bc9ac972d2dbb46d2534559d2a268a7b06872b279015809a323f3d53c7dfdb01537035a4ef485275a727aeb29328e49c1afc4fedac87d9333f059963f54a333d21b4faa9f912ab2af2e72f6941c3d1c979331e34f62fa7dac23daf29f24c049d3395fea0e77ad4dfdf496844cf289390364ce2defdab1e2b9bc4a935d030d9cf05fb2c79325c80ab426d6ed274d5440464d7074bdbbf47551d91dc9993a8935eb4f4ec9378102a8a32d1768221ee7ba35cefcd91d1e90d39ae8de541cddb8cab43a01a960e09d820fc6c1a35cbe372d0121d22fd1938cda5f89861be9a587173dbd8c5e232ce766ea43e1dc46754b18ecc7eceb34f3e87d41db9a48befefd46134b1144963ede9b117ef7556857fb9cd4ad6f0a6a050a45bc7e3698c169149cacf761b5533d74e9c7f2c6e01ec0fba86466c86e62c3fd9fbd1462fdd558d9e2aedfc65fc8d583ddca868fa29acebaa190e42f35b8912fe353d331e64fd0ae5310b7ef3e52b1c4d2cd7e99dd0553259394f44b8b71a0ad36918c6b2d9941e1c1872daf9351606edd68bf125246b99d2cf44ecd1c526fdc06fbfa3d9c9"
        const spvTx = SPVTx.fromHex(spvTxHex)
        assert.equal(spvTx.toHex(), spvTxHex)
    })
})